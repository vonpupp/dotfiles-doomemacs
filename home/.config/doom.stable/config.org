* My Doom Emacs config

My nth+1 attempt to config Doom Emacs.

** Disclaimer
[[https://i.kym-cdn.com/photos/images/newsfeed/000/234/765/b7e.jpg]]

** Assumptions
- I heavily rely on "Explicit is better than implicit", meaning I always use the --doomdir and --emacsdir flag

~/.config/emacs/bin/doom [install|sync|run|doctor] --doomdir ~/.config/doom.stable --emacsdir ~/.config/emacs

** How to install
#+BEGIN_SRC sh :tangle no
rm -rf .config/doom/
rm -rf .config/emacs/

git clone https://github.com/doomemacs/doomemacs ~/.config/emacs

mkdir /home/av/.config/doom.stable
mkdir /home/av/.config/doom.unstable

cat ~/.config/emacs/profiles.el
((stable    (user-emacs-directory . "~/.config/emacs")
            ("DOOMDIR" . "~/.config/doom.stable"))
 (unstable  (user-emacs-directory . "~/.config/emacs")
            ("DOOMDIR" . "~/.config/doom.unstable"))
 (spacemacs (user-emacs-directory . "~/spacemacs"))
 (prelude   (user-emacs-directory . "~/prelude"))
)

~/.config/emacs/bin/doom install --doomdir ~/.config/doom.stable --emacsdir ~/.config/emacs
~/.config/emacs/bin/doom install --doomdir ~/.config/doom.unstable --emacsdir ~/.config/emacs

doom profile sync --all

~/.config/emacs/bin/doom sync --doomdir ~/.config/doom.stable --emacsdir ~/.config/emacs
~/.config/emacs/bin/doom run --doomdir ~/.config/doom.stable --emacsdir ~/.config/emacs
~/.config/emacs/bin/doom doctor --doomdir ~/.config/doom.stable --emacsdir ~/.config/emacs
#+END_SRC

** Emacs server
*** Use
#+BEGIN_SRC sh :tangle no
export DOOMDIR="$HOME/.config/doom.stable"
export EMACSDIR="$HOME/.config/emacs"

emacsclient --socket-name=doom-stable -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t
exec emacs --init-directory="$EMACSDIR" --daemon=doom-stable "$@"
#+END_SRC

*** Config
#+begin_src emacs-lisp
(setq server-name "doom-stable")
(server-start)
#+end_src
** Doom base config                                                   :doom:
*** Config
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name (or (getenv "EMACS_USER_FULL_NAME") "Anonymous User")
      user-mail-address (or (getenv "EMACS_USER_EMAIL_ADDRESS") "anon@example.com"))

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-one)
;;(setq doom-theme 'doom-gruvbox)
(setq doom-theme 'doom-molokai)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory (or (getenv "EMACS_ORG_DIRECTORY") "~/org"))

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Set POSIX-compliant shell for internal Emacs processes
(setq shell-file-name (executable-find "bash"))

;; Keep interactive terminal (vterm/shell/etc) using fish
(setq-default explicit-shell-file-name "/usr/bin/fish")
(setq-default vterm-shell "/usr/bin/fish")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; No confirm on exit
(setq confirm-kill-emacs nil)

(setq doom-unicode-font (font-spec :family "Cardo"))
;(setq doom-variable-pitch-font (font-spec :family "Ezra"))
;(setq doom-font (font-spec :family "JetBrains Mono" :size 24)
;      doom-big-font (font-spec :family "JetBrains Mono" :size 36)
;      doom-variable-pitch-font (font-spec :family "Overpass" :size 24)
;      doom-unicode-font (font-spec :family "JuliaMono")
;      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))

; See: https://www.reddit.com/r/DoomEmacs/comments/llow52/rtl_languages/
(setq-default bidi-display-reordering 't
              bidi-paragraph-direction 'nil)
#+END_SRC

*** Basic use
| =SPC h v=                  | Describes a variable    |
| =SPC o t= / =vterm/toggle= | Opens a terminal frame  |
| =SPC o T= / =vterm/here=   | Opens a terminal window |
*** How to reload the config?
- Use =ems-sync=
** org-mode / Org                                                 :org_mode:
*** Config
#+BEGIN_SRC emacs-lisp
(after! org
  ;; Appearance
  (setq org-ellipsis " â–¼ "
        org-tags-column -77)

  ;; Source block indentation
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)

  (setq my-org-directory (or (getenv "EMACS_MY_ORG_DIRECTORY") "~/org")
      my-org-roam-directory (or (getenv "EMACS_MY_ORG_ROAM_DIRECTORY") "~/org/roam")
      my-org-journal-directory (or (getenv "EMACS_MY_ORG_JOURNAL_DIRECTORY") "~/org/journal")
      org-default-capture-file (or (getenv "EMACS_ORG_DEFAULT_CAPTURE_FILE") "~/org/capture.org")
      my-org-notes (or (getenv "EMACS_MY_ORG_NOTES") "~/org/notes"))

  ;; Modules
  (setq org-modules
        '(org-habit org-protocol))
        ;'(org-habit org-protocol org-w3m))

  ;; Logging
  (setq org-log-into-drawer "LOGBOOK"
        org-log-reschedule 'note)

  ;; Inheritance
  (setq org-use-property-inheritance
        '("project" "agenda-group"))

  ;; Misc
  (setq org-insert-heading-respect-content t
        org-latex-inputenc-alist '(("" . ("utf8" . "utf8x")))
        org-confirm-babel-evaluate nil)

  ;; File association
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

  ;; Org ID logic
  (require 'uuidgen)
  (setq org-id-link-to-org-use-id
        'create-if-interactive-and-no-custom-id
        org-id-locations-file (concat my-org-directory ".org-id-locations"))

  ;; Disable hl-todo-mode in org
  (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))

  ;; Accept local variable in .dir-locals.el
  (put 'org-todo-keyword-faces 'safe-local-variable #'listp)

  ;; Hotkey override
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-/") #'my-org-open-at-point)))

  ;; Auto-generate IDs if `#+OPTIONS: auto-id:t` is in file
  (defun vonpupp/org-custom-id-get (&optional pom create prefix)
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id)) id)
         (create
          (setq id (org-id-new))
          (org-entry-put pom "ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun vonpupp/org-add-ids-to-headlines-in-file ()
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
        (org-map-entries
         (lambda () (vonpupp/org-custom-id-get (point) 'create))))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook
                        (lambda ()
                          (when (and (eq major-mode 'org-mode)
                                     (not buffer-read-only))
                            (vonpupp/org-add-ids-to-headlines-in-file)))
                        nil 'local)))
  ;; Calendar
  (setq calendar-week-start-day 1)

  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
                      :height 0.7)
  (setq calendar-intermonth-text
        '(propertize
          (format "W%02d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))

  (copy-face 'default 'calendar-iso-week-header-face)
  (set-face-attribute 'calendar-iso-week-header-face nil
                      :height 0.7)
  (setq calendar-intermonth-header
        (propertize "W"                  ; or e.g. "KW" in Germany
                    'font-lock-face 'calendar-iso-week-header-face))

  (set-face-attribute 'calendar-iso-week-face nil
                        :height 1.0 :foreground "salmon")

  ;; org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
    '((emacs-lisp . t)
    (python . t)
    (jupyter . t)
    (ein . t)
    (ipython . t)
    (sclang . t)
    (ditaa . t)
    (lilypond t)
    ))
)

(after! ox
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))

#+END_SRC

** org-protocol / capture templates                               :org_mode:
*** Config
#+BEGIN_SRC emacs-lisp
  ;; Doc: https://github.com/sprig/org-capture-extension
  ;; (defun transform-square-brackets-to-round-ones(string-to-transform)
  ;;   "Transforms [ into ( and ] into ), other chars left unchanged."
  ;;   (concat
  ;;    (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  ;;   )

  ;; CAPTURE
(after! org
  ;; org all setting start here
  ;; start org-protocol
  (require 'org-protocol)

  ;; with eval after load org
  (with-eval-after-load 'org
    ;; org-protocol
    (add-to-list 'org-modules 'org-protocol))
  (setq org-capture-templates
    '(
      ;; Doc: https://github.com/sprig/org-capture-extension
      ;; Doc: https://gist.github.com/cjp/64ac13f5966456841c197f70c7d3a53a
      ("p" "Protocol" entry (file+headline "~/org/capture.org" "Inbox")
        "* [[%:link][%:description]]\n- Source: %:link\n- Title: %:description\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n")
      ("L" "Browser link" entry (file+headline "~/org/capture.org" "Inbox")
        "* [[%:link][%:description]]\n- Source: %:link\n- Title: %:description\n- Captured on: %u\n")

      ;; Templates for the TASKS keyword sequence
      ("t" "Tasks")

      ;; TEMPLATE A
      ("th" "SMART Habit" entry (file org-default-capture-file)
       "* REPEAT %^{Describe the task}       :HABIT:
  %?
  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")
  :STYLE:    habit
  :SMART:
  :Specific:   %^{What is the purpose of this goal}
  :Measurable: %^{How can you measure it}
  :Activity:   %^{What activity do we need to do}
  :Resources:  %^{What resources do we need}
  :Timebox:    %^{What time do we need to spend on that}
  :Reviewed:
  :LOGBOOK:
  - Recorded: %U
  :HoursWeek:  Get it automatically
  :END:" :empty-lines 1)
  )))
#+END_SRC

*** Quick how to use org-protocol / capture templates
- [[id:5f48cafd-14d1-40e0-ae00-77b35d8542ef][Capturing using templates]]
- I have set up some mappings on tridactyl to ease the process of capturing:
  - =,l= for capturing links
  - =,s= for capturing selected text
  - =,r= for capturing using org-roam

Or, use the following extensions:
- Chrome: [[https://chrome.google.com/webstore/detail/org-capture/kkkjlfejijcjgjllecmnejhogpbcigdc]]
- Firefox: [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/]]

Once installed an icon on the top of the browser should appear. To setup the
handler and the templates read: [[https://github.com/sprig/org-capture-extension]]

The '(server-start)' is needed. So start emacs using =em=

** org-roam / Roam                                           :org_mode:apps:
*** Config
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
  ;:after (org emacsql-sqlite-builtin)
  ;:commands (org-roam-node-insert org-roam-node-find org-roam-switch-to-buffer org-roam)
  ;:hook
  ;(after-init . org-roam-setup)
  :after (org emacsql-sqlite-builtin)
  :hook (after-init . org-roam-setup)
  :init
  (setq org-roam-directory
      (file-truename
       (or (getenv "EMACS_ORG_ROAM_DIRECTORY")
           "~/org/roam/"))
      org-roam-database-connector 'sqlite-builtin
      org-roam-db-gc-threshold most-positive-fixnum
      org-id-link-to-org-use-id t
      org-roam-graphviz-executable "/usr/bin/dot"
      org-roam-dailies-directory "journal/"
      org-roam-graph-exclude-matcher "private"
      org-roam-tag-sources '(prop last-directory))

  (map! :leader
        :prefix "r"
        :desc "org-roam-buffer-toggle" "l" #'org-roam-buffer-toggle
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-node-find" "f" #'org-roam-node-find
        :desc "org-roam-graph-show" "g" #'org-roam-graph
        ;:desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-capture" "c" #'org-roam-capture
        :desc "org-roam-dailies-capture-today" "j" #'org-roam-dailies-capture-today
        :desc "deft" "s" #'deft)
  ;(setq org-roam-v2-ack t)
  :config
  (org-roam-setup)
  (org-roam-db-autosync-mode +1))

;(use-package! org-roam
;  :defer t
;  :config
;    (setq
;        org-roam-db-location (file-truename "~/org/org-roam.db")
;        org-attach-id-dir "assets/"
;    (org-roam-db-autosync-enable)))

(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

(after! (org-roam)
  (winner-mode +1)
  (map! :map winner-mode-map
        "<M-right>" #'winner-redo
        "<M-left>" #'winner-undo))

;(map! :map evil-org-mode-map
;      :leader
;      (:prefix ("r")
;       :desc "Insert node"
;       "i" #'org-roam-node-insert
;       :desc "Find node"
;       "f" #'org-roam-node-find
;       :desc "Journal today"
;       "j" #'org-roam-dailies-capture-today
;       :desc "Capture to node"
;       "c" #'org-roam-capture
;       :desc "Toggle roam buffer"
;       "b" #'org-roam-buffer-toggle
;       :desc "Open random note"
;       "r" #'org-roam-node-random
;       :desc "Visit node"
;       "v" #'org-roam-node-visit
;       :desc "Visit node"
;       "s" #'deft
;       :desc "Open ORUI"
;       "u" #'org-roam-ui-open))


;  (set-company-backend! 'org-mode '(company-capf)))
#+END_SRC
** org-reverse-datetree                                      :org_mode:apps:
*** Config
#+BEGIN_SRC emacs-lisp
(use-package! org-reverse-datetree
  :after org
  )
#+END_SRC

*** Integration with super agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
  '(("r" "Y2024 Reverse daily tasks"
     ;org-ql-block '(and (level 4) (todo)
     ;                  (< (- (float-time (org-reverse-datetree-guess-date))
     ;                        (float-time))
     ;                     (* 3600 24 14))
     ;))))
     ;(
      (org-super-agenda-groups
       '((:todo "DONE")
         (:todo t)))
      (org-agenda-files '("~/org/exobrain/20231120231619-daily_tasks_log_y2024.org")
                        (org-agenda nil "a")
                        ))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (org-ql-block '(level 2))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (org-ql-block '(level 3))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (org-ql-block '(level 4))
#+END_SRC
*** Quick how to use org-reverse-datetree
- Add the following header section:
  #+BEGIN_EXAMPLE
    #+REVERSE_DATETREE_DATE_FORMAT: %Y-%m-%d %a
    #+REVERSE_DATETREE_WEEK_FORMAT: %Y-W%W
    #+REVERSE_DATETREE_YEAR_FORMAT: %Y
    #+REVERSE_DATETREE_USE_WEEK_TREE: t
  #+END_EXAMPLE
- Use =org-reverse-datetree-goto-date-in-file=
- Pick the date
- Notes: [[id:b35d9436-20bc-4c95-9666-adc6eaa31506][How to use org-reverse-datetree]]

** openwith                                                      :apps:core:
*** Config
#+BEGIN_SRC emacs-lisp
(use-package! openwith
  :after-call pre-command-hook
  :config
  (openwith-mode -1)
  (add-to-list 'openwith-associations '("\\.mp4\\'" "mpv" (file)))
  (add-to-list 'openwith-associations '("\\.mp3\\'" "mpv" (file)))
  (add-to-list 'openwith-associations '("\\.png\\'" "shotwell" (file)))
  (add-to-list 'openwith-associations '("\\.pdf\\'" "zathura" (file)))
)

; Disable by default
(add-hook 'after-init-hook 'openwith-mode -1)
#+END_SRC

*** Quick how to use openwith
*IMPORTANT NOTE*
- To open PDF's on emacs =disable= the =openwith-mode=, and click a pdf file.
- To open PDF's on zathura, just click the pdf file (=openwith-mode= is enabled
  by default)
- Test link: [[~/org-media/20200822194657-books_to_read/guitartheoryrevolution.info-gtrbook1.pdf]]
- It should open with zathura

** browse-url-browser-function                                        :core:
*** Config
#+BEGIN_SRC emacs-lisp
(defun mpv-play-url (url &rest args)
  ""
  (interactive)
  (call-process "mpv" nil 0 nil "--player-operation-mode=pseudo-gui" url))

;(defun firefox-browse-url (url &rest args)
;  ""
;  (interactive)
;  (call-process "firefox" nil 0 nil url))
;
;(defun ice-firefox-browse-url (url &rest args)
;  ""
;  (interactive)
;  (call-process "ice-firefox.sh" nil 0 nil url))

(defun ice-trading-browse-url (url &rest args)
  ""
  (interactive)
  (call-process "ice-trading.sh" nil 0 nil url))

(defun chromium-browse-url (url &rest args)
  ""
  (interactive)
  (call-process "chromium" nil 0 nil url))

(defun zathura-open-url (url &rest args)
  ""
  (interactive)
  (call-process "zathura" nil 0 nil url))

;(setq browse-url-browser-function
;  (quote (
;    ("tradingview\\.?com" . ice-trading-browse-url)
;    ("youtu\\.?be" . mpv-play-url)
;    ("youtube\\.?com" . mpv-play-url)
;    ("audio\\.esv\\.?org" . mpv-play-url)
;    (".\\.pdf" . zathura-open-url))))
;    ;("." . chromium-browse-url))))
;    ;("." . eww-browse-url))))
;
;; https://emacs.stackexchange.com/questions/11008/can-org-mode-open-a-link-in-external-browser-when-using-prefix-key
;(defun my-org-open-at-point (&optional arg)
;  (interactive "P")
;  (if (not arg)
;      (org-open-at-point)
;      (let ((browse-url-browser-function #'chromium-browse-url))
;        (org-open-at-point))))

(defun browse-url-firefox (url &optional _new-window)
  "Open URL with Firefox."
  (start-process "firefox" nil "firefox" url))

(after! org
  (setq browse-url-handlers
        '(
          ("tradingview\\.?com" . ice-trading-browse-url)
          ("youtu\\.?be" . mpv-play-url)
          ("youtube\\.?com" . mpv-play-url)
          ("audio\\.esv\\.?org" . mpv-play-url)
          ("http" . browse-url-firefox)
          ("https" . browse-url-firefox)
          (".\\.pdf" . zathura-open-url)
          ;("." . chromium-browse-url)
          ;("." . eww-browse-url)
          ("ftp" . browse-url-firefox)))
        )
#+END_SRC
*** Quick how to use browse-url-browser-function
This snippets will open links on youtube with mpv and any file ending in pdf
with zathura. This is still work in progress.

I have moved away from =start-process= to =call-process= because the process is
not anchored to emacs, so I can still close emacs and continue the process if
needed. This probably need tweaks on MS Windows, but since I don't use it, I
just don't care. Read more [[https://emacs.stackexchange.com/questions/22363/possible-to-detach-a-child-process/65040#65040][here]].

Test link: https://www.youtube.com/watch?v=fWmZoaTvA8k
It should open with mpv

** magit / Git                                                   :apps:core:
*** Config
#+BEGIN_SRC emacs-lisp
;; Flyspell commit messages
(add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
#+END_SRC
*** Quick how to use magit
- Notes: [[id:da84ced2-888f-4c20-8934-cb3ae037846c][How to use magit]]
** org-ql                                                    :org_mode:apps:
*** Config
#+BEGIN_SRC emacs-lisp
(use-package! org-ql
  :after org
  ;;(require 'org-ql)
)
#+END_SRC
*** Quick how to use org-ql
- Just =C-c C-c= on this block
  #+BEGIN: org-ql :query "todo:" :columns ((priority "P") ((property "milestone") "M") (todo "org") heading) :sort (priority todo date) :ts-format "%Y-%m-%d %H:%M"
  | P | M | org  | Heading                               |
  |---+---+------+---------------------------------------|
  |   |   | TODO | [[Emacs server + CLI/GUI clients][Emacs server + CLI/GUI clients]]        |
  |   |   | TODO | [[Review which files are able to refile][Review which files are able to refile]] |
  |   |   | TODO | [[ox-json][ox-json]]                               |
  |   |   | TODO | [[ob-translate][ob-translate]]                          |
  |   |   | TODO | [[ob-browser][ob-browser]]                            |
  |   |   | TODO | [[org-super-agenda][org-super-agenda]]                      |
  |   |   | TODO | [[org-kanban][org-kanban]]                            |
  |   |   | TODO | [[poet theme for writing?][poet theme for writing?]]               |
  #+END:
- Notes: [[id:9a551e35-2ce8-4eee-a711-e1776c19fa8d][How to use org-ql]]

** anki-editor / Anki                                        :apps:learning:
*** Config
#+BEGIN_SRC emacs-lisp
(use-package! anki-editor
  :after org
  :config
    (setq anki-editor-create-decks t
          anki-editor-org-tags-as-anki-tags t))


(map! :localleader
      :map org-mode-map
      (:prefix ("a" . "Anki")
        :desc "Push" "p" 'anki-editor-push-notes
        :desc "Retry" "r" 'anki-editor-retry-failure-notes
        :desc "Insert" "n" 'anki-editor-insert-note
        (:prefix ("c" . "Cloze")
          :desc "Dwim" "d" 'anki-editor-cloze-dwim
          :desc "Region" "r" 'anki-editor-cloze-region
          )
        )
 )
#+END_SRC

*** Quick how to use anki-editor
- Open Anki
- =anki-editor-mode=
- =anki-editor-push-notes=
- Notes: [[id:09a66f47-2588-4dd0-b836-0d5e31fd6bcc][How to create an anki deck using org-mode]]

** [0%] Tasks [0%] [0/7]                                          :noexport:
*** TODO Emacs server + CLI/GUI clients
*** TODO Review which files are able to refile
*** TODO ox-json
- https://www.reddit.com/r/emacs/comments/ccwl4r/i_made_a_json_export_back_end_for_org_mode/
*** TODO ob-translate
- https://github.com/krisajenkins/ob-translate
*** TODO ob-browser
- https://github.com/krisajenkins/ob-browser
*** TODO org-super-agenda
*** TODO org-kanban
- https://github.com/lijigang/ljg-dotfile/blob/master/spacemacs-config.org
*** TODO poet theme for writing?
*** FIX edit-server
